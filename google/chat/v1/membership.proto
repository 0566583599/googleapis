// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.chat.v1;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/chat/v1/user.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/chat/v1;chat";
option java_multiple_files = true;
option java_outer_classname = "MembershipProto";
option java_package = "com.google.chat.v1";

// Represents a membership relation in Google Chat, such as whether a user or
// Chat app is invited to, part of, or absent from a space.
message Membership {
  option (google.api.resource) = {
    type: "chat.googleapis.com/Membership"
    pattern: "spaces/{space}/members/{member}"
  };

  // Specifies the member's relationship with a space. Other membership states
  // might be supported in the future.
  enum MembershipState {
    // Default, do not use.
    MEMBERSHIP_STATE_UNSPECIFIED = 0;

    // The user has joined the space.
    JOINED = 1;

    // The user has been invited, is able to join the space, but currently has
    // not joined.
    INVITED = 2;

    // The user is not a member of the space, has not been invited and is not
    // able to join the space.
    NOT_A_MEMBER = 3;
  }

  // Represents a user's permitted actions in a Chat space. More enum values
  // might be added in the future.
  enum MembershipRole {
    // Default value. The user isn't a member of the space, but might be
    // invited.
    MEMBERSHIP_ROLE_UNSPECIFIED = 0;

    // A member of the space. The user has basic permissions, like sending
    // messages to the space. In 1:1 and unnamed group conversations, everyone
    // has this role.
    ROLE_MEMBER = 1;

    // A space manager. The user has all basic permissions plus administrative
    // permissions that allow them to manage the space, like adding or removing
    // members. Only supported in
    // [SpaceType.SPACE][google.chat.v1.Space.SpaceType].
    ROLE_MANAGER = 2;
  }

  // Resource name of the membership.
  //
  // Format: spaces/{space}/members/{member}
  string name = 1 [
    (google.api.resource_reference) = { type: "chat.googleapis.com/Membership" }
  ];

  // Output only. State of the membership.
  MembershipState state = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. User's role within a Chat space, which determines their
  // permitted actions in the space.
  MembershipRole role = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Member associated with this membership. Other member types might be
  // supported in the future.
  oneof memberType {
    // A Google Chat user or app.
    //
    // Format: `users/{user}` or `users/app`
    //
    // When `users/{user}`, represents a
    // [person](https://developers.google.com/people/api/rest/v1/people) in the
    // People API or a
    // [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
    // in the Admin SDK Directory API.
    //
    // When `users/app`, represents a Chat app creating membership for itself.
    User member = 3;
  }

  // Output only. The creation time of the membership, such as when a member
  // joined or was invited to join a space.
  google.protobuf.Timestamp create_time = 4
      [(google.api.field_behavior) = OUTPUT_ONLY];
}

// [Developer Preview](https://developers.google.com/workspace/preview).
message CreateMembershipRequest {
  // Required. The resource name of the space for which to create the
  // membership.
  //
  // Format: spaces/{space}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "chat.googleapis.com/Membership"
    }
  ];

  // Required. The membership relation to create.
  // The `memberType` field must contain a user with the `user.name` and
  // `user.type` fields populated. The server will assign a resource name
  // and overwrite anything specified.
  // When a Chat app creates a membership relation for a human user, it must use
  // the `chat.memberships` scope, set `user.type` to `HUMAN`, and set
  // `user.name` to `users/{person}`, representing a
  // [person](https://developers.google.com/people/api/rest/v1/people) in the
  // People API. When a Chat app creates a membership relation for itself, it
  // must use the `chat.memberships.app` scope, set `user.type` to `BOT`, and
  // set `user.name` to `users/app`.
  Membership membership = 2 [(google.api.field_behavior) = REQUIRED];
}

message ListMembershipsRequest {
  // Required. The resource name of the space for which to fetch a membership
  // list.
  //
  // Format: spaces/{space}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "chat.googleapis.com/Membership"
    }
  ];

  // The maximum number of memberships to return. The service may return fewer
  // than this value.
  //
  // If unspecified, at most 100 memberships are returned.
  //
  // The maximum value is 1000; values above 1000 are coerced to 1000.
  //
  // Negative values return an INVALID_ARGUMENT error.
  int32 page_size = 2;

  // A page token, received from a previous list memberships call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided should match the call that
  // provided the page token. Passing different values to the other parameters
  // may lead to unexpected results.
  string page_token = 3;

  // Optional. A query filter.
  //
  // The API supports filtering by `role` and `type`.
  //
  // `role` only accepts `ROLE_MEMBER` and `ROLE_MANAGER` values.
  //
  // `member.type` only accepts `HUMAN` and `BOT` values.
  //
  // For example, the following queries are valid:
  //
  // ```
  // role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
  // member.type = "HUMAN" AND role = "ROLE_MANAGER"
  // ```
  //
  // Invalid queries are rejected by the server with an INVALID_ARGUMENT error.
  string filter = 5 [(google.api.field_behavior) = OPTIONAL];

  // Optional. When `true`, also returns memberships associated with
  // [invited][google.chat.v1.Membership.MembershipState.INVITED] members, in
  // addition to other types of memberships. If a
  // [filter][google.chat.v1.Membership.filter] is set,
  // [invited][google.chat.v1.Membership.MembershipState.INVITED] memberships
  // that don't match the filter criteria aren't returned.
  //
  // Currently requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users).
  bool show_invited = 7 [(google.api.field_behavior) = OPTIONAL];
}

message ListMembershipsResponse {
  // List of memberships in the requested (or first) page.
  repeated Membership memberships = 1;

  // A token that can be sent as `pageToken` to retrieve the next page of
  // results. If empty, there are no subsequent pages.
  string next_page_token = 2;
}

message GetMembershipRequest {
  // Required. Resource name of the membership to retrieve.
  //
  // Format: spaces/{space}/members/{member}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "chat.googleapis.com/Membership" }
  ];
}

message DeleteMembershipRequest {
  // Required. Resource name of the membership to delete. Chat apps can delete
  // human users' or their own memberships. Chat apps can't delete other apps'
  // memberships.
  //
  // When deleting a human membership, requires the `chat.memberships` scope and
  // `spaces/{space}/members/{member}` format.
  //
  // When deleting an app membership, requires the `chat.memberships.app` scope
  // and `spaces/{space}/members/app` format.
  //
  // Format: spaces/{space}/members/{member} or spaces/{space}/members/app
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "chat.googleapis.com/Membership" }
  ];
}
