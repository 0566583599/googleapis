// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.chat.v1;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/apps/card/v1/card.proto";
import "google/chat/v1/action_status.proto";
import "google/chat/v1/annotation.proto";
import "google/chat/v1/attachment.proto";
import "google/chat/v1/contextual_addon.proto";
import "google/chat/v1/deletion_metadata.proto";
import "google/chat/v1/matched_url.proto";
import "google/chat/v1/reaction.proto";
import "google/chat/v1/slash_command.proto";
import "google/chat/v1/space.proto";
import "google/chat/v1/user.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/chat/v1;chat";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option java_package = "com.google.chat.v1";

// A message in Google Chat.
message Message {
  option (google.api.resource) = {
    type: "chat.googleapis.com/Message"
    pattern: "spaces/{space}/messages/{message}"
  };

  // Resource name in the form `spaces/*/messages/*`.
  //
  // Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
  string name = 1;

  // Output only. The user who created the message.
  User sender = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time at which the message was created in Google Chat
  // server.
  google.protobuf.Timestamp create_time = 3
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time at which the message was last edited by a user. If
  // the message has never been edited, this field is empty.
  google.protobuf.Timestamp last_update_time = 23
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The time at which the message was deleted in
  // Google Chat server. If the message is never deleted, this field is empty.
  // [Developer Preview](https://developers.google.com/workspace/preview).
  google.protobuf.Timestamp delete_time = 26
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Plain-text body of the message. The first link to an image, video, web
  // page, or other preview-able item generates a preview chip.
  string text = 4;

  // Deprecated: Use `cards_v2` instead.
  //
  // Rich, formatted and interactive cards that can be used to display UI
  // elements such as: formatted texts, buttons, clickable images. Cards are
  // normally displayed below the plain-text body of the message.
  repeated ContextualAddOnMarkup.Card cards = 5 [deprecated = true];

  // Richly formatted and interactive cards that display UI elements and
  // editable widgets, such as:
  //
  // - Formatted text
  // - Buttons
  // - Clickable images
  // - Checkboxes
  // - Radio buttons
  // - Input widgets.
  //
  // Cards are usually displayed below the text body of a Chat message, but can
  // situationally appear other places, such as
  // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
  //
  // The `cardId` is a unique identifier among cards in the same message and
  // for identifying user input values.
  //
  // Currently supported widgets include:
  //
  // - `TextParagraph`
  // - `DecoratedText`
  // - `Image`
  // - `ButtonList`
  // - `Divider`
  repeated CardWithId cards_v2 = 22;

  // Output only. Annotations associated with the text in this message.
  repeated Annotation annotations = 10
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // The thread the message belongs to. For example usage, see
  // [Start or reply to a message
  // thread](https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
  Thread thread = 11;

  // The space the message belongs to.
  // When accessed with [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users),
  // only the name of the Space is populated.
  Space space = 12;

  // A plain-text description of the message's cards, used when the actual cards
  // cannot be displayed (e.g. mobile notifications).
  string fallback_text = 13;

  // Input only. Parameters that a Chat app can use to configure how its
  // response is posted.
  ActionResponse action_response = 14
      [(google.api.field_behavior) = INPUT_ONLY];

  // Plain-text body of the message with all Chat app mentions stripped out.
  string argument_text = 15;

  // Output only. Slash command information, if applicable.
  SlashCommand slash_command = 17 [(google.api.field_behavior) = OUTPUT_ONLY];

  // User-uploaded attachment.
  repeated Attachment attachment = 18;

  // Output only. A URL in `spaces.messages.text` that matches a link preview
  // pattern. For more information, refer to [Preview
  // links](https://developers.google.com/chat/how-tos/preview-links).
  MatchedUrl matched_url = 20 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. When `true`, the message is a response in a reply thread. When
  // `false`, the message is visible in the space's top-level conversation as
  // either the first message of a thread or a message with no threaded replies.
  //
  // If the space doesn't support reply in threads, this field is always
  // `false`.
  bool thread_reply = 25 [(google.api.field_behavior) = OUTPUT_ONLY];

  // A custom name for a Chat message assigned at creation. Must start with
  // `client-` and contain only lowercase letters, numbers, and hyphens up to 63
  // characters in length. Specify this field to get, update, or delete the
  // message with the specified value. For example usage, see [Name a created
  // message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
  string client_assigned_message_id = 32;

  // Output only. The list of emoji reaction summaries on the message.
  // [Developer Preview](https://developers.google.com/workspace/preview).
  repeated EmojiReactionSummary emoji_reaction_summaries = 33
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. Information about a deleted message. A message is deleted when
  // `delete_time` is set.
  // [Developer Preview](https://developers.google.com/workspace/preview).
  DeletionMetadata deletion_metadata = 38
      [(google.api.field_behavior) = OUTPUT_ONLY];
}

// A thread in Google Chat.
message Thread {
  option (google.api.resource) = {
    type: "chat.googleapis.com/Thread"
    pattern: "spaces/{space}/threads/{thread}"
  };

  // Resource name of the thread.
  //
  // Example: spaces/{space}/threads/{thread}
  string name = 1;

  // Optional. Opaque thread identifier.
  // To start or add to a thread, create a message and specify a `threadKey`
  // or the [thread.name][google.chat.v1.Thread.name]. For example usage, see
  // [Start or reply to a message
  // thread](https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
  //
  // For other requests, this is an output only field.
  string thread_key = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Parameters that a Chat app can use to configure how its response is posted.
message ActionResponse {
  // The type of Chat app response.
  enum ResponseType {
    // Default type; will be handled as NEW_MESSAGE.
    TYPE_UNSPECIFIED = 0;

    // Post as a new message in the topic.
    NEW_MESSAGE = 1;

    // Update the Chat app's message. This is only permitted on a CARD_CLICKED
    // event where the message sender type is BOT.
    UPDATE_MESSAGE = 2;

    // Update the cards on a user's message. This is only permitted as a
    // response to a MESSAGE event with a matched url, or a CARD_CLICKED event
    // where the message sender type is HUMAN. Text will be ignored.
    UPDATE_USER_MESSAGE_CARDS = 6;

    // Privately ask the user for additional auth or config.
    REQUEST_CONFIG = 3;

    // Presents a
    // [dialog](https://developers.google.com/chat/how-tos/dialogs).
    DIALOG = 4;
  }

  // Input only. The type of Chat app response.
  ResponseType type = 1 [(google.api.field_behavior) = INPUT_ONLY];

  // Input only. URL for users to auth or config. (Only for REQUEST_CONFIG
  // response types.)
  string url = 2 [(google.api.field_behavior) = INPUT_ONLY];

  // Input only. A response to an event related to a
  // [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be
  // accompanied by `ResponseType.Dialog`.
  DialogAction dialog_action = 3 [(google.api.field_behavior) = INPUT_ONLY];
}

message GetMessageRequest {
  // Required. Resource name of the message to retrieve.
  //
  // Format: spaces/{space}/messages/{message}
  //
  // If the message begins with `client-`, then it has a custom name assigned by
  // a Chat app that created it with the Chat REST API. That Chat app (but not
  // others) can pass the custom name to get, update, or delete the message. To
  // learn more, see [create and name a message]
  // (https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "chat.googleapis.com/Message" }
  ];
}

message DeleteMessageRequest {
  // Required. Resource name of the message to be deleted, in the form
  // "spaces/*/messages/*"
  //
  // Example: spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "chat.googleapis.com/Message" }
  ];

  // When `true`, deleting a message also deletes its threaded replies. When
  // `false`, if a message has threaded replies, deletion fails.
  //
  // Only applies when [authenticating as a
  // user](https://developers.google.com/chat/api/guides/auth/users). Has no
  // effect when [authenticating with a service account]
  // (https://developers.google.com/chat/api/guides/auth/service-accounts).
  bool force = 2;
}

message UpdateMessageRequest {
  // Required. Message with fields updated.
  Message message = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The field paths to update. Separate multiple values with commas.
  //
  // Currently supported field paths:
  //
  // - text
  //
  // - cards (Requires [service account
  // authentication](/chat/api/guides/auth/service-accounts).)
  //
  // - cards_v2
  //
  google.protobuf.FieldMask update_mask = 2;

  // Optional. If `true` and the message is not found, a new message is created
  // and `updateMask` is ignored. The specified message ID must be
  // [client-assigned](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message)
  // or the request fails.
  bool allow_missing = 4 [(google.api.field_behavior) = OPTIONAL];
}

// Creates a message.
message CreateMessageRequest {
  // Specifies how to reply to a message.
  // More states may be added in the future.
  enum MessageReplyOption {
    // Default. Starts a thread.
    MESSAGE_REPLY_OPTION_UNSPECIFIED = 0;

    // Creates the message as a reply to the thread specified by [thread
    // ID][google.chat.v1.Thread.name] or
    // [thread_key][google.chat.v1.Thread.thread_key]. If it fails, the message
    // starts a new thread instead.
    REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD = 1;

    // Creates the message as a reply to the thread specified by [thread
    // ID][google.chat.v1.Thread.name] or
    // [thread_key][google.chat.v1.Thread.thread_key]. If it fails, a NOT_FOUND
    // error is returned instead.
    REPLY_MESSAGE_OR_FAIL = 2;
  }

  // Required. The resource name of the space in which to create a message.
  //
  // Format: spaces/{space}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "chat.googleapis.com/Message"
    }
  ];

  // Required. Message body.
  Message message = 4 [(google.api.field_behavior) = REQUIRED];

  // Optional. Deprecated: Use
  // [thread.thread_key][google.chat.v1.Thread.thread_key] instead. Opaque
  // thread identifier. To start or add to a thread, create a message and
  // specify a `threadKey` or the [thread.name][google.chat.v1.Thread.name]. For
  // example usage, see [Start or reply to a message
  // thread](https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
  string thread_key = 6
      [deprecated = true, (google.api.field_behavior) = OPTIONAL];

  // Optional. A unique request ID for this message. Specifying an existing
  // request ID returns the message created with that ID instead of creating a
  // new message.
  string request_id = 7 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Specifies whether a message starts a thread or replies to one.
  // Only supported in named spaces.
  MessageReplyOption message_reply_option = 8
      [(google.api.field_behavior) = OPTIONAL];

  // Optional. A custom name for a Chat message assigned at creation. Must start
  // with `client-` and contain only lowercase letters, numbers, and hyphens up
  // to 63 characters in length. Specify this field to get, update, or delete
  // the message with the specified value. For example usage, see [Name a
  // created
  // message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
  string message_id = 9 [(google.api.field_behavior) = OPTIONAL];
}

// Lists messages in the specified space, that the user is a member of.
// [Developer Preview](https://developers.google.com/workspace/preview).
message ListMessagesRequest {
  // Required. The resource name of the space to list messages from.
  //
  // Format: spaces/{space}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "chat.googleapis.com/Message"
    }
  ];

  // The maximum number of messages returned. The service may return fewer
  // messages than this value.
  //
  // If unspecified, at most 25 are returned.
  //
  // The maximum value is 1000; values above 1000 are coerced to 1000.
  //
  // Negative values return an INVALID_ARGUMENT error.
  int32 page_size = 2;

  // Optional, if resuming from a previous query.
  //
  // A page token received from a previous list messages call. Provide this
  // to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided should match the call that
  // provided the page token. Passing different values to the other parameters
  // may lead to unexpected results.
  string page_token = 3;

  // A query filter.
  //
  // The API supports filtering by `create_time` and `thread.name`.
  //
  // For example, the following queries are valid:
  //
  // ```
  // create_time > "2012-04-21T11:30:00-04:00"
  //
  // create_time > "2012-04-21T11:30:00-04:00" AND
  //   thread.name = spaces/AAAAAAAAAAA/threads/123
  //
  // create_time > "2012-04-21T11:30:00+00:00" AND
  // create_time < "2013-01-01T00:00:00+00:00" AND
  //   thread.name = spaces/AAAAAAAAAAA/threads/123
  // ```
  //
  // Note that the create_time timestamp must be enclosed in double-quotes.
  //
  // At most 1 thread is supported in the query.
  //
  // Invalid queries are rejected by the server with an INVALID_ARGUMENT error.
  string filter = 4;

  // Optional, if resuming from a previous query.
  //
  // How the list of messages is ordered.  Specify a value to order by and an
  // ordering operation. Valid ordering operation values are:
  //
  // - `ASC` for ascending.
  //
  // - `DESC` for descending.
  //
  // The default ordering is `create_time ASC`.
  //
  // The supported syntax is:
  //
  // `create_time ASC`
  string order_by = 5;

  // Whether to include deleted messages. Deleted messages include deleted time
  // and metadata about their deletion, but message content is unavailable.
  bool show_deleted = 6;
}

message ListMessagesResponse {
  // List of messages.
  repeated Message messages = 1;

  // A token that can be sent as `pageToken` to retrieve the next page of
  // results. If empty, there are no subsequent pages.
  string next_page_token = 2;
}

// Contains a
// [dialog](https://developers.google.com/chat/how-tos/dialogs) and request
// status code.
message DialogAction {
  oneof action {
    // Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs)
    // for the request.
    Dialog dialog = 1 [(google.api.field_behavior) = INPUT_ONLY];
  }

  // Input only. Status for a request to either invoke or submit a
  // [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays
  // a status and message to users, if necessary.
  // For example, in case of an error or success.
  ActionStatus action_status = 2 [(google.api.field_behavior) = INPUT_ONLY];
}

// Wrapper around the card body of the dialog.
message Dialog {
  // Input only. Body of the dialog, which is rendered in a modal.
  // Google Chat apps do not support the following card entities:
  // `DateTimePicker`, `OnChangeAction`.
  google.apps.card.v1.Card body = 1 [(google.api.field_behavior) = INPUT_ONLY];
}

// Widgets for Chat apps to specify.
message CardWithId {
  // Required for `cardsV2` messages. Chat app-specified identifier for this
  // widget. Scoped within a message.
  string card_id = 1;

  // Cards support a defined layout, interactive UI elements like buttons, and
  // rich media like images. Use this card to present detailed information,
  // gather information from users, and guide users to take a next step.
  google.apps.card.v1.Card card = 2;
}
