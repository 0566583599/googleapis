// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.chat.v1;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/chat/v1/history_state.proto";
import "google/protobuf/field_mask.proto";

option go_package = "google.golang.org/genproto/googleapis/chat/v1;chat";
option java_multiple_files = true;
option java_outer_classname = "SpaceProto";
option java_package = "com.google.chat.v1";

// A space in Google Chat. Spaces are conversations between two or more users
// or 1:1 messages between a user and a Chat app.
message Space {
  option (google.api.resource) = {
    type: "chat.googleapis.com/Space"
    pattern: "spaces/{space}"
  };

  // Deprecated: The type of a space. Use `singleUserBotDm` or `spaceType`
  // (developer preview) instead.
  enum Type {
    TYPE_UNSPECIFIED = 0;

    // Conversations between two or more humans.
    ROOM = 1;

    // 1:1 Direct Message between a human and a Chat app, where all messages are
    // flat. Note that this does not include direct messages between two humans.
    DM = 2;
  }

  // The type of space. Required when creating or updating a space. Output only
  // for other usage. [Developer
  // Preview](https://developers.google.com/workspace/preview).
  enum SpaceType {
    // Reserved.
    SPACE_TYPE_UNSPECIFIED = 0;

    // A place where people send messages, share files, and collaborate.
    // A `SPACE` can include Chat apps.
    SPACE = 1;

    // Group conversations between 3 or more people.
    // A `GROUP_CHAT` can include Chat apps.
    GROUP_CHAT = 2;

    // 1:1 messages between two humans or a human and a Chat app.
    DIRECT_MESSAGE = 3;
  }

  // Specifies the type of threading state in the Chat space.
  enum SpaceThreadingState {
    // Reserved.
    SPACE_THREADING_STATE_UNSPECIFIED = 0;

    // Named spaces that support message threads. When users respond to a
    // message, they can reply in-thread, which keeps their response in the
    // context of the original message.
    THREADED_MESSAGES = 2;

    // Named spaces where the conversation is organized by topic. Topics and
    // their replies are grouped together.
    GROUPED_MESSAGES = 3;

    // Direct messages (DMs) between two people and group conversations between
    // 3 or more people.
    UNTHREADED_MESSAGES = 4;
  }

  // Details about the space including description and rules.
  message SpaceDetails {
    // Optional. A description of the space. It could describe the space's
    // discussion topic, functional purpose, or participants.
    string description = 1;

    // Optional. The space's rules, expectations, and etiquette.
    string guidelines = 2;
  }

  // Resource name of the space.
  //
  // Format: spaces/{space}
  string name = 1;

  // Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer
  // preview) instead.
  //
  // The type of a space.
  Type type = 2 [deprecated = true, (google.api.field_behavior) = OUTPUT_ONLY];

  // The type of space. Required when creating or updating a space. Output only
  // for other usage. [Developer
  // Preview](https://developers.google.com/workspace/preview).
  SpaceType space_type = 10;

  // Optional. Whether the space is a DM between a Chat app and a single
  // human.
  bool single_user_bot_dm = 4 [(google.api.field_behavior) = OPTIONAL];

  // Output only. Deprecated: Use `spaceThreadingState` instead.
  // Whether messages are threaded in this space.
  bool threaded = 5
      [deprecated = true, (google.api.field_behavior) = OUTPUT_ONLY];

  // The space's display name. Required when [creating a
  // space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create).
  //
  // For direct messages, this field may be empty.
  string display_name = 3;

  // Output only. The threading state in the Chat space.
  SpaceThreadingState space_threading_state = 9
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Details about the space including description and rules.
  SpaceDetails space_details = 11;

  // The message history state for messages and threads in this space.
  // [Developer Preview](https://developers.google.com/workspace/preview).
  HistoryState space_history_state = 13;
}

// [Developer Preview](https://developers.google.com/workspace/preview).
message CreateSpaceRequest {
  // Required. The `displayName` and `spaceType` fields must be populated.
  // Only `SpaceType.SPACE` is supported. The resource name will be assigned on
  // the server and overwrite anything specified.
  Space space = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. A unique identifier for this request.
  // A random UUID is recommended.
  // This request is only idempotent if a `request_id` is provided.
  // Specifying an existing value for `request_id` from the same Chat app with
  // a different authenticated user returns an error.
  string request_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

// A request to list the spaces the caller is a member of.
message ListSpacesRequest {
  // Optional. The maximum number of spaces to return. The service may return
  // fewer than this value.
  //
  // If unspecified, at most 100 spaces are returned.
  //
  // The maximum value is 1000; values above 1000 are coerced to 1000.
  //
  // Negative values return an INVALID_ARGUMENT error.
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A page token, received from a previous list spaces call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, the filter value should match the call that provided the
  // page token. Passing a different value may lead to unexpected results.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. A query filter.
  //
  // Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users).
  //
  // The API supports filtering by `spaceType`.
  //
  // For example, the following queries are valid:
  //
  // ```
  // spaceType = "SPACE"
  // spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
  // ```
  //
  // Invalid queries are rejected by the server with an INVALID_ARGUMENT error.
  //
  // With [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts),
  // this field is ignored and the query always returns all spaces. But Chat API
  // still validates the query syntax with service accounts, so invalid queries
  // are still rejected.
  //
  // [Developer Preview](https://developers.google.com/workspace/preview).
  string filter = 3 [(google.api.field_behavior) = OPTIONAL];
}

message ListSpacesResponse {
  // List of spaces in the requested (or first) page.
  repeated Space spaces = 1;

  // A token that can be sent as `pageToken` to retrieve the next page of
  // results. If empty, there are no subsequent pages.
  string next_page_token = 2;
}

// A request to return a single space.
message GetSpaceRequest {
  // Required. Resource name of the space, in the form "spaces/*".
  //
  // Format: spaces/{space}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "chat.googleapis.com/Space" }
  ];
}

// A request to update a single space.
// [Developer Preview](https://developers.google.com/workspace/preview).
message UpdateSpaceRequest {
  // Required. Space with fields to be updated. Space.name must be
  // populated in the form of "spaces/{space}". Only fields
  // specified by update_mask are updated.
  Space space = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The field paths to be updated, comma separated if there are
  // multiple.
  //
  // Currently supported field paths:
  //
  // - display_name (Only supports changing the display name of a space with
  // the SPACE type, or when also including the `space_type` mask to change a
  // GROUP_CHAT space type to SPACE. Trying to update the display name of a
  // GROUP_CHAT or a DIRECT_MESSAGE space results in an invalid argument error.)
  //
  // - space_type (Only supports changing a GROUP_CHAT space type to SPACE.
  // Include `display_name` together with `space_type` in the update mask and
  // ensure that the specified space has a non-empty display name and the SPACE
  // space type. Including the `space_type` mask and the SPACE type in the
  // specified space when updating the display name is optional if the existing
  // space already has the SPACE type. Trying to update the space type in other
  // ways results in an invalid argument error).
  //
  // - space_details
  //
  // - space_history_state (Supports [turning history on or off for the
  // space](https://support.google.com/chat/answer/7664687) if [the organization
  // allows users to change their history
  // setting](https://support.google.com/a/answer/7664184).
  // Warning: mutually exclusive with all other field paths.)
  google.protobuf.FieldMask update_mask = 2;
}

// Request for deleting a space.
message DeleteSpaceRequest {
  // Required. Resource name of the space to delete.
  //
  // Format: spaces/{space}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "chat.googleapis.com/Space" }
  ];
}
