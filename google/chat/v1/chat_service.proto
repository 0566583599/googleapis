// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.chat.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/chat/v1/attachment.proto";
import "google/chat/v1/membership.proto";
import "google/chat/v1/message.proto";
import "google/chat/v1/reaction.proto";
import "google/chat/v1/space.proto";
import "google/chat/v1/space_setup.proto";
import "google/protobuf/empty.proto";

option go_package = "google.golang.org/genproto/googleapis/chat/v1;chat";
option java_multiple_files = true;
option java_outer_classname = "ChatServiceProto";
option java_package = "com.google.chat.v1";

// Enables developers to build Chat apps and
// integrations on Google Chat Platform.
service ChatService {
  option (google.api.default_host) = "chat.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/chat.bot,"
      "https://www.googleapis.com/auth/chat.delete,"
      "https://www.googleapis.com/auth/chat.memberships,"
      "https://www.googleapis.com/auth/chat.memberships.app,"
      "https://www.googleapis.com/auth/chat.memberships.readonly,"
      "https://www.googleapis.com/auth/chat.messages,"
      "https://www.googleapis.com/auth/chat.messages.create,"
      "https://www.googleapis.com/auth/chat.messages.reactions,"
      "https://www.googleapis.com/auth/chat.messages.reactions.create,"
      "https://www.googleapis.com/auth/chat.messages.reactions.readonly,"
      "https://www.googleapis.com/auth/chat.messages.readonly,"
      "https://www.googleapis.com/auth/chat.spaces,"
      "https://www.googleapis.com/auth/chat.spaces.create,"
      "https://www.googleapis.com/auth/chat.spaces.readonly";

  // Creates a message.
  // For example usage, see [Create a
  // message](https://developers.google.com/chat/api/guides/crudl/messages#create_a_message).
  //
  // Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth).
  // Fully supports
  // [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.messages` or `chat.messages.create` authorization scope.
  //
  // Because Chat provides authentication for
  // [webhooks](https://developers.google.com/chat/how-tos/webhooks)
  // as part of the URL that's generated when a webhook is registered, webhooks
  // can create messages without a service account or user authentication.
  rpc CreateMessage(CreateMessageRequest) returns (Message) {
    option (google.api.http) = {
      post: "/v1/{parent=spaces/*}/messages"
      body: "message"
    };
    option (google.api.method_signature) = "parent,message,message_id";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Lists messages in a space that the caller is a member of, including
  // messages from blocked members and spaces. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.messages` or `chat.messages.readonly` authorization scope.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=spaces/*}/messages"
    };
    option (google.api.method_signature) = "parent";
  }

  // Lists memberships in a space.
  //
  // Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth/).
  // Fully supports
  // [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.memberships` or `chat.memberships.readonly`
  // authorization scope.
  rpc ListMemberships(ListMembershipsRequest)
      returns (ListMembershipsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=spaces/*}/members"
    };
    option (google.api.method_signature) = "parent";
  }

  // Returns a membership.
  //
  // Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth/).
  // Fully supports
  // [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.memberships` or `chat.memberships.readonly`
  // authorization scope.
  rpc GetMembership(GetMembershipRequest) returns (Membership) {
    option (google.api.http) = {
      get: "/v1/{name=spaces/*/members/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Returns a message.
  // For example usage, see [Read a
  // message](https://developers.google.com/chat/api/guides/crudl/messages#read_a_message).
  //
  // Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth).
  // Fully supports [Service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.messages` or `chat.messages.readonly` authorization
  // scope.
  //
  // Note: Might return a message from a blocked member or space.
  rpc GetMessage(GetMessageRequest) returns (Message) {
    option (google.api.http) = {
      get: "/v1/{name=spaces/*/messages/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Updates a message.
  // For example usage, see [Update a
  // message](https://developers.google.com/chat/api/guides/crudl/messages#update_a_message).
  //
  // Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth/).
  // Fully supports
  // [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.messages` authorization scope.
  rpc UpdateMessage(UpdateMessageRequest) returns (Message) {
    option (google.api.http) = {
      put: "/v1/{message.name=spaces/*/messages/*}"
      body: "message"
      additional_bindings {
        patch: "/v1/{message.name=spaces/*/messages/*}"
        body: "message"
      }
    };
    option (google.api.method_signature) = "message,update_mask";
  }

  // Deletes a message.
  // For example usage, see [Delete a
  // message](https://developers.google.com/chat/api/guides/crudl/messages#delete_a_message).
  //
  // Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth).
  // Fully supports
  // [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.messages` authorization scope.
  rpc DeleteMessage(DeleteMessageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=spaces/*/messages/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Gets the metadata of a message attachment. The attachment data is fetched
  // using the [media
  // API](https://developers.google.com/chat/api/reference/rest/v1/media/download).
  // Requires [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  rpc GetAttachment(GetAttachmentRequest) returns (Attachment) {
    option (google.api.http) = {
      get: "/v1/{name=spaces/*/messages/*/attachments/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Uploads an attachment. Requires user
  // [authentication](https://developers.google.com/chat/api/guides/auth/users).
  rpc UploadAttachment(UploadAttachmentRequest)
      returns (UploadAttachmentResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=spaces/*}/attachments:upload"
      body: "*"
    };
  }

  // Lists spaces the caller is a member of. Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth).
  // Fully supports [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.spaces` or `chat.spaces.readonly` authorization scope.
  //
  // Lists spaces visible to the caller or authenticated user. Group chats
  // and DMs aren't listed until the first message is sent.
  rpc ListSpaces(ListSpacesRequest) returns (ListSpacesResponse) {
    option (google.api.http) = {
      get: "/v1/spaces"
    };
    option (google.api.method_signature) = "";
  }

  // Returns a space. Requires
  // [authentication](https://developers.google.com/chat/api/guides/auth).
  // Fully supports [service account
  // authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
  //
  // Supports [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // as part of the [Google Workspace Developer Preview
  // Program](https://developers.google.com/workspace/preview), which grants
  // early access to certain features.
  // [User
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // requires the `chat.spaces` or `chat.spaces.readonly` authorization scope.
  rpc GetSpace(GetSpaceRequest) returns (Space) {
    option (google.api.http) = {
      get: "/v1/{name=spaces/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Creates a named space. Spaces grouped by topics or that have guest access
  // are not supported. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.spaces.create` scope.
  rpc CreateSpace(CreateSpaceRequest) returns (Space) {
    option (google.api.http) = {
      post: "/v1/spaces"
      body: "space"
    };
    option (google.api.method_signature) = "space";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Creates a space and adds users to it.
  //
  // When creating a direct message (DM) between two users, if a DM already
  // exists then it gets returned. Otherwise, creates a DM.
  //
  // Spaces with threaded replies or guest access are not supported.
  //
  // Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.spaces.create` scope.
  rpc SetUpSpace(SetUpSpaceRequest) returns (Space) {
    option (google.api.http) = {
      post: "/v1/spaces:setup"
      body: "*"
    };
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Updates a space.
  // Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.spaces` scope.
  rpc UpdateSpace(UpdateSpaceRequest) returns (Space) {
    option (google.api.http) = {
      patch: "/v1/{space.name=spaces/*}"
      body: "space"
    };
    option (google.api.method_signature) = "space,update_mask";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Deletes a named space. Always performs a cascading delete, which means
  // that the space's child resources - like messages posted in the space and
  // memberships in the space - are also deleted. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // from a user who has permission to delete the space, and the `chat.delete`
  // scope.
  rpc DeleteSpace(DeleteSpaceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=spaces/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Creates a human membership or app membership for the calling app. Creating
  // memberships for other apps is not supported. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.memberships` (for human membership) or `chat.memberships.app`
  // (for app membership) scope.
  rpc CreateMembership(CreateMembershipRequest) returns (Membership) {
    option (google.api.http) = {
      post: "/v1/{parent=spaces/*}/members"
      body: "membership"
    };
    option (google.api.method_signature) = "parent,membership";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Deletes a membership.
  //
  // Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.memberships` or `chat.memberships.app` authorization scope.
  rpc DeleteMembership(DeleteMembershipRequest) returns (Membership) {
    option (google.api.http) = {
      delete: "/v1/{name=spaces/*/members/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Creates a reaction and adds it to a message. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.messages`, `chat.messages.reactions`, or
  // `chat.messages.reactions.create` scope.
  rpc CreateReaction(CreateReactionRequest) returns (Reaction) {
    option (google.api.http) = {
      post: "/v1/{parent=spaces/*/messages/*}/reactions"
      body: "reaction"
    };
    option (google.api.method_signature) = "parent,reaction";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Lists reactions to a message. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and `chat.messages`, `chat.messages.readonly`, `chat.messages.reactions`,
  // or `chat.messages.reactions.readonly` scope.
  rpc ListReactions(ListReactionsRequest) returns (ListReactionsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=spaces/*/messages/*}/reactions"
    };
    option (google.api.method_signature) = "parent";
  }

  // [Developer Preview](https://developers.google.com/workspace/preview):
  // Deletes a reaction to a message. Requires [user
  // authentication](https://developers.google.com/chat/api/guides/auth/users)
  // and the `chat.messages` or `chat.messages.reactions` scope.
  rpc DeleteReaction(DeleteReactionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=spaces/*/messages/*/reactions/*}"
    };
    option (google.api.method_signature) = "name";
  }
}
