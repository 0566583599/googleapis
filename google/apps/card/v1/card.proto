// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.apps.card.v1;

import "google/type/color.proto";

option go_package = "google.golang.org/genproto/googleapis/apps/card/v1;card";
option java_multiple_files = true;
option java_outer_classname = "CardProto";
option java_package = "com.google.apps.card.v1";

// Cards support a defined layout, interactive UI elements like buttons, and
// rich media like images. Use cards to present detailed information,
// gather information from users, and guide users to take a next step.
//
// In Google Chat, cards appear in several places:
//
// - As stand-alone messages.
// - Accompanying a text message, just beneath the text message.
// - As a [dialog](https://developers.google.com/chat/how-tos/dialogs).
//
//
// The following example JSON creates a "contact card" that features:
//
// - A header with the contact's name, job title, avatar picture.
// - A section with the contact information, including formatted text.
// - Buttons that users can click to share the contact or see more or less info.
//
// ![Example contact
// card](https://developers.google.com/chat/images/card_api_reference.png)
//
// ```
// {
//   "cardsV2": [
//     {
//       "cardId": "unique-card-id",
//       "card": {
//         "header": {
//           "title": "Sasha",
//           "subtitle": "Software Engineer",
//           "imageUrl":
//           "https://developers.google.com/chat/images/quickstart-app-avatar.png",
//           "imageType": "CIRCLE",
//           "imageAltText": "Avatar for Sasha",
//         },
//         "sections": [
//           {
//             "header": "Contact Info",
//             "collapsible": true,
//             "uncollapsibleWidgetsCount": 1,
//             "widgets": [
//               {
//                 "decoratedText": {
//                   "startIcon": {
//                     "knownIcon": "EMAIL",
//                   },
//                   "text": "sasha@example.com",
//                 }
//               },
//               {
//                 "decoratedText": {
//                   "startIcon": {
//                     "knownIcon": "PERSON",
//                   },
//                   "text": "<font color=\"#80e27e\">Online</font>",
//                 },
//               },
//               {
//                 "decoratedText": {
//                   "startIcon": {
//                     "knownIcon": "PHONE",
//                   },
//                   "text": "+1 (555) 555-1234",
//                 }
//               },
//               {
//                 "buttonList": {
//                   "buttons": [
//                     {
//                       "text": "Share",
//                       "onClick": {
//                         "openLink": {
//                           "url": "https://example.com/share",
//                         }
//                       }
//                     },
//                     {
//                       "text": "Edit",
//                       "onClick": {
//                         "action": {
//                           "function": "goToView",
//                           "parameters": [
//                             {
//                               "key": "viewType",
//                               "value": "EDIT",
//                             }
//                           ],
//                         }
//                       }
//                     },
//                   ],
//                 }
//               },
//             ],
//           },
//         ],
//       },
//     }
//   ],
// }
// ```
message Card {
  // Represents a card header.
  message CardHeader {
    // Required. The title of the card header.
    // The header has a fixed height: if both a
    // title and subtitle are specified, each takes up one line. If only the
    // title is specified, it takes up both lines.
    string title = 1;

    // The subtitle of the card header. If specified, appears on its own line
    // below the `title`.
    string subtitle = 2;

    // The shape used to crop the image.
    Widget.ImageType image_type = 3;

    // The HTTPS URL of the image in the card header.
    string image_url = 4;

    // The alternative text of this image which is used for accessibility.
    string image_alt_text = 5;
  }

  // A section contains a collection of widgets that are rendered
  // vertically in the order that they are specified.
  message Section {
    // Text that appears at the top of a section.
    // Supports [simple HTML formatted
    // text](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
    string header = 1;

    // All the widgets in the section.
    // Must contain at least 1 widget.
    repeated Widget widgets = 2;

    // Indicates whether this section is collapsible.
    //
    // Collapsible sections hide some or all widgets, but users can expand the
    // section to reveal the hidden widgets by clicking **Show more**. Users
    // can hide the widgets again by clicking **Show less**.
    //
    // To determine which widgets are hidden, specify
    // `uncollapsibleWidgetsCount`.
    bool collapsible = 5;

    // The number of uncollapsible widgets which remain visible even when a
    // section is collapsed.
    //
    // For example, when a section
    // contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`,
    // the first two widgets are always shown and the last three are collapsed
    // by default. The `uncollapsibleWidgetsCount` is taken into account only
    // when `collapsible` is `true`.
    int32 uncollapsible_widgets_count = 6;
  }

  // A card action is the action associated with the card. For example,
  // an invoice card might include actions such as delete invoice, email
  // invoice, or open the invoice in a browser.
  //
  // Not supported by Chat apps.
  message CardAction {
    // The label that displays as the action menu item.
    string action_label = 1;

    // The `onClick` action for this action item.
    OnClick on_click = 2;
  }

  // A persistent (sticky) footer that that appears at the bottom of the card.
  //
  // Setting `fixedFooter` without specifying a `primaryButton` or a
  // `secondaryButton` causes an error.
  //
  // Chat apps support `fixedFooter` in
  // [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not in
  // [card
  // messages](https://developers.google.com/chat/api/guides/message-formats/cards).
  message CardFixedFooter {
    // The primary button of the fixed footer.  The button must be a text button
    // with text and color set.
    Button primary_button = 1;

    // The secondary button of the fixed footer.  The button must be a text
    // button with text and color set.
    // `primaryButton` must be set if `secondaryButton` is set.
    Button secondary_button = 2;
  }

  // In Google Workspace Add-ons,
  // determines how a card is displayed.
  //
  // Not supported by Chat apps.
  enum DisplayStyle {
    // Do not use.
    DISPLAY_STYLE_UNSPECIFIED = 0;

    // The header of the card appears at the bottom of the
    // sidebar, partially covering the current top card of the stack. Clicking
    // the header pops the card into the card stack. If the card has no header,
    // a generated header is used instead.
    PEEK = 1;

    // Default value. The card is shown by replacing the view of the top card in
    // the card stack.
    REPLACE = 2;
  }

  // The header of the card. A header usually contains a leading image and a
  // title. Headers always appear at the top of a card.
  CardHeader header = 1;

  // Contains a collection of widgets. Each section has its own, optional
  // header. Sections are visually separated by a line divider.
  repeated Section sections = 2;

  // The card's actions. Actions are added to the card's toolbar menu.
  //
  // Because Chat app cards have no toolbar, `cardActions[]` is not supported by
  // Chat apps.
  //
  // For example, the following JSON constructs a card action menu with Settings
  // and Send Feedback options:
  //
  // ```
  // "card_actions": [
  //   {
  //     "actionLabel": "Settings",
  //     "onClick": {
  //       "action": {
  //         "functionName": "goToView",
  //         "parameters": [
  //           {
  //             "key": "viewType",
  //             "value": "SETTING"
  //          }
  //         ],
  //         "loadIndicator": "LoadIndicator.SPINNER"
  //       }
  //     }
  //   },
  //   {
  //     "actionLabel": "Send Feedback",
  //     "onClick": {
  //       "openLink": {
  //         "url": "https://example.com/feedback"
  //       }
  //     }
  //   }
  // ]
  // ```
  repeated CardAction card_actions = 3;

  // Name of the card. Used as a card identifier in card navigation.
  //
  // Because Chat apps don't support card navigation, they ignore this field.
  string name = 4;

  // The fixed footer shown at the bottom of this card.
  //
  // Setting `fixedFooter` without specifying a `primaryButton` or a
  // `secondaryButton` causes an error.
  //
  // Chat apps support `fixedFooter` in
  // [dialogs](https://developers.google.com/chat/how-tos/dialogs), but not in
  // [card
  // messages](https://developers.google.com/chat/api/guides/message-formats/cards).
  CardFixedFooter fixed_footer = 5;

  // In Google Workspace add-ons, sets the display properties of the
  // `peekCardHeader`.
  //
  // Not supported by Chat apps.
  DisplayStyle display_style = 6;

  // When displaying contextual content, the peek card header acts as a
  // placeholder so that the user can navigate forward between the homepage
  // cards and the contextual cards.
  //
  // Not supported by Chat apps.
  CardHeader peek_card_header = 7;
}

// Each card is made up of widgets.
//
// A widget is a composite object that can represent one of text, images,
// buttons, and other object types.
message Widget {
  // The shape used to crop the image.
  enum ImageType {
    // Default value. Applies a square mask to the image. For example, a 4x3
    // image becomes 3x3.
    SQUARE = 0;

    // Applies a circular mask to the image. For example, a 4x3 image becomes a
    // circle with a diameter of 3.
    CIRCLE = 1;
  }

  // A widget can only have one of the following items. You can use multiple
  // widget fields to display more items.
  oneof data {
    // Displays a text paragraph. Supports
    // [simple HTML formatted
    // text](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
    //
    // For example, the following JSON creates a bolded text:
    // ```
    // "textParagraph": {
    //   "text": "  <b>bold text</b>"
    // }
    // ```
    TextParagraph text_paragraph = 1;

    // Displays an image.
    //
    // For example, the following JSON creates an image with alternative text:
    // ```
    // "image": {
    //   "imageUrl":
    //   "https://developers.google.com/chat/images/quickstart-app-avatar.png"
    //   "altText": "Chat app avatar"
    // }
    // ```
    Image image = 2;

    // Displays a decorated text item.
    //
    // For example, the following JSON creates a decorated text widget showing
    // email address:
    //
    // ```
    // "decoratedText": {
    //   "icon": {
    //     "knownIcon": "EMAIL"
    //   },
    //   "topLabel": "Email Address",
    //   "text": "sasha@example.com",
    //   "bottomLabel": "This is a new Email address!",
    //   "switchWidget": {
    //     "name": "has_send_welcome_email_to_sasha",
    //     "selected": false,
    //     "controlType": "ControlType.CHECKBOX"
    //   }
    // }
    // ```
    DecoratedText decorated_text = 3;

    // A list of buttons.
    //
    // For example, the following JSON creates two buttons. The first
    // is a blue text button and the second is an image button that opens a
    // link:
    // ```
    // "buttonList": {
    //   "buttons": [
    //     "button": {
    //       "text": "Edit",
    //       "color": {
    //         "red": 0,
    //         "green": 0,
    //         "blue": 1,
    //         "alpha": 1
    //        }
    //       "disabled": true
    //     },
    //     "button": {
    //       "icon": {
    //         "knownIcon": "INVITE"
    //         "altText": "check calendar"
    //       },
    //       "onClick": {
    //         "openLink": {
    //           "url": "https://example.com/calendar"
    //         }
    //       }
    //     },
    //   ]
    // }
    // ```
    ButtonList button_list = 4;

    // Displays a text box that users can type into.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    //
    // For example, the following JSON creates a text input for an email
    // address:
    //
    // ```
    // "textInput": {
    //   "name": "mailing_address",
    //   "label": "Mailing Address"
    // }
    // ```
    //
    // As another example, the following JSON creates a text input for a
    // programming language with static suggestions:
    // ```
    // "textInput": {
    //   "name": "preferred_programing_language",
    //   "label": "Preferred Language",
    //   "initialSuggestions": {
    //     "items": [
    //       {
    //         "text": "C++"
    //       },
    //       {
    //         "text": "Java"
    //       },
    //       {
    //         "text": "JavaScript"
    //       },
    //       {
    //         "text": "Python"
    //       }
    //     ]
    //   }
    // }
    // ```
    TextInput text_input = 5;

    // Displays a selection control that lets users select items. Selection
    // controls can be check boxes, radio buttons, switches, or dropdown menus.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    //
    // For example, the following JSON creates a dropdown menu that lets users
    // choose a size:
    //
    // ```
    // "selectionInput": {
    //   "name": "size",
    //   "label": "Size"
    //   "type": "SelectionType.DROPDOWN",
    //   "items": [
    //     {
    //       "text": "S",
    //       "value": "small",
    //       "selected": false
    //     },
    //     {
    //       "text": "M",
    //       "value": "medium",
    //       "selected": true
    //     },
    //     {
    //       "text": "L",
    //       "value": "large",
    //       "selected": false
    //     },
    //     {
    //       "text": "XL",
    //       "value": "extra_large",
    //       "selected": false
    //     }
    //   ]
    // }
    // ```
    SelectionInput selection_input = 6;

    // Displays a selection/input widget for date, time, or date and time.
    //
    // Not supported by Chat apps. Support by Chat apps is coming soon.
    //
    // For example, the following JSON creates a datetime picker to schedule an
    // appointment:
    //
    //
    // ```
    // "date_time_picker": {
    //   "name": "appointment_time",
    //   "label": "Book your appointment at:",
    //   "type": "DateTimePickerType.DATE_AND_TIME",
    //   "valueMsEpoch": "796435200000"
    // }
    // ```
    DateTimePicker date_time_picker = 7;

    // Displays a horizontal line divider between widgets.
    //
    // For example, the following JSON creates a divider:
    // ```
    // "divider": {
    // }
    // ```
    Divider divider = 9;

    // Displays a grid with a collection of items.
    //
    // A grid supports any number of columns and items. The number of rows is
    // determined by the upper bounds of the number items divided by the number
    // of columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11
    // items and 2 columns has 6 rows.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    //
    // For example, the following JSON creates a 2 column grid with a single
    // item:
    //
    // ```
    // "grid": {
    //   "title": "A fine collection of items",
    //   "numColumns": 2,
    //   "borderStyle": {
    //     "type": "STROKE",
    //     "cornerRadius": 4.0
    //   },
    //   "items": [
    //     "image": {
    //       "imageUri": "https://www.example.com/image.png",
    //       "cropStyle": {
    //         "type": "SQUARE"
    //       },
    //       "borderStyle": {
    //         "type": "STROKE"
    //       }
    //     },
    //     "title": "An item",
    //     "textAlignment": "CENTER"
    //   ],
    //   "onClick": {
    //     "openLink": {
    //       "url":"https://www.example.com"
    //     }
    //   }
    // }
    // ```
    Grid grid = 10;
  }
}

// A paragraph of text that supports formatting. See [Text
// formatting](https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting)
// for details.
message TextParagraph {
  // The text that's shown in the widget.
  string text = 1;
}

// An image that is specified by a URL and can have an `onClick` action.
message Image {
  // The `https` URL that hosts the image.
  //
  // For example:
  //
  // ```
  // https://developers.google.com/chat/images/quickstart-app-avatar.png
  // ```
  string image_url = 1;

  // When a user clicks on the image, the click triggers this action.
  OnClick on_click = 2;

  // The alternative text of this image, used for accessibility.
  string alt_text = 3;
}

// Displays a divider between widgets, a horizontal line.
//
// For example, the following JSON creates a divider:
//
// ```
// "divider": {
// }
// ```
message Divider {}

// A widget that displays text with optional decorations such as a label above
// or below the text, an icon in front of the text, a selection widget or a
// button after the text.
message DecoratedText {
  // Either a toggle-style switch or a checkbox inside a `decoratedText` widget.
  //
  // Only supported on the `decoratedText` widget.
  //
  // Currently supported in
  // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
  // Support for
  // [card
  // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
  // is coming soon.
  message SwitchControl {
    // How the switch appears in the user interface.
    enum ControlType {
      // A toggle-style switch.
      SWITCH = 0;

      // Deprecated in favor of `CHECK_BOX`.
      CHECKBOX = 1;

      // A checkbox.
      CHECK_BOX = 2;
    }

    // The name by which the switch widget is identified in a form input event.
    //
    // For details about working with form inputs, see [Receive form
    // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
    string name = 1;

    // The value entered by a user, returned as part of a form input event.
    //
    // For details about working with form inputs, see [Receive form
    // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
    string value = 2;

    // When `true`, the switch is selected.
    bool selected = 3;

    // The action to perform when the switch state is changed, such as what
    //  function to run.
    Action on_change_action = 4;

    // How the switch appears in the user interface.
    ControlType control_type = 5;
  }

  // Deprecated in favor of `startIcon`.
  Icon icon = 1 [deprecated = true];

  // The icon displayed in front of the text.
  Icon start_icon = 12;

  // The text that appears above `text`. Always truncates.
  //
  // Supports simple formatting. See <a
  // href="https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting">Text
  // formatting</a> for formatting details.
  string top_label = 3;

  // Required. The primary text.
  //
  // Supports simple formatting. See <a
  // href="https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting">Text
  // formatting</a> for formatting details.
  string text = 4;

  // The wrap text setting. If `true`, the text wraps and displays on
  // multiple lines. Otherwise, the text is truncated.
  //
  // Only applies to `text`, not `topLabel` and `bottomLabel`.
  bool wrap_text = 5;

  // The text that appears below `text`. Always truncates.
  //
  // Supports simple formatting. See <a
  // href="https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting">Text
  // formatting</a> for formatting details.
  string bottom_label = 6;

  // When users click on `topLabel` or `bottomLabel`, this action triggers.
  OnClick on_click = 7;

  // A button, switch, checkbox, or image that appears to the right-hand side
  // of text in the `decoratedText` widget.
  oneof control {
    // A button that can be clicked to trigger an action.
    Button button = 8;

    // A switch widget can be clicked to change its state and trigger an
    // action.
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    SwitchControl switch_control = 9;

    // An icon displayed after the text.
    //
    // Supports
    // [standard](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons)
    // and
    // [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons)
    // icons.
    Icon end_icon = 11;
  }
}

// A field in which users can enter text. Supports suggestions and on-change
// actions.
//
// Chat apps receive and can process the value of entered text during form input
// events. For details about working with form inputs, see [Receive form
// data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
//
// When you need to collect abstract data from users,
// use a text input. To collect defined data from users, use the
// selection input widget instead.
//
// Only supported in
// [dialogs](https://developers.google.com/chat/how-tos/dialogs). Support for
// [card
// messages](https://developers.google.com/chat/api/guides/message-formats/cards)
// coming soon.
message TextInput {
  // How a text input field appears in the user interface. For example,
  // whether it is a single line input field, or a multi-line input.
  //
  // If `initialSuggestions` is specified, `type` is always `SINGLE_LINE`,
  // even if it is set to `MULTIPLE_LINE`.
  enum Type {
    // The text input field has a fixed height of one line.
    SINGLE_LINE = 0;

    // The text input field has a fixed height of multiple lines.
    MULTIPLE_LINE = 1;
  }

  // The name by which the text input is identified in a form input event.
  //
  // For details about working with form inputs, see [Receive form
  // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
  string name = 1;

  // The text that appears above the text input field in the user interface.
  //
  // Specify text that helps the user enter the information your app needs.
  // For example, if you are asking someone's name, but specifically need their
  // surname, write "surname" instead of "name".
  //
  // Required if `hintText` is unspecified. Otherwise, optional.
  string label = 2;

  // Text that appears below the text input field meant to assist users by
  // prompting them to enter a certain value. This text is always visible.
  //
  // Required if `label` is unspecified. Otherwise, optional.
  string hint_text = 3;

  // The value entered by a user, returned as part of a form input event.
  //
  // For details about working with form inputs, see [Receive form
  // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
  string value = 4;

  // How a text input field appears in the user interface.
  // For example, whether the field is single or multi-line.
  Type type = 5;

  // What to do when a change occurs in the text input field.
  //
  // Examples of changes include a user adding to the field, or deleting text.
  //
  // Examples of actions to take include running a custom function or opening
  // a [dialog](https://developers.google.com/chat/how-tos/dialogs)
  // in Google Chat.
  Action on_change_action = 6;

  // Suggested values that users can enter. These values appear when users click
  // inside the text input field. As users type, the suggested values
  // dynamically filter to match what the users have typed.
  //
  // For example, a text input field for programming language might suggest
  // Java, JavaScript, Python, and C++. When users start typing "Jav", the list
  // of suggestions filters to show just Java and JavaScript.
  //
  // Suggested values help guide users to enter values that your app can make
  // sense of. When referring to JavaScript, some users might enter "javascript"
  // and others "java script". Suggesting "JavaScript" can standardize how users
  // interact with your app.
  //
  // When specified, `TextInput.type` is always `SINGLE_LINE`, even if it is set
  // to `MULTIPLE_LINE`.
  Suggestions initial_suggestions = 7;

  // Optional. Specify what action to take when the text input field provides
  // suggestions to users who interact with it.
  //
  // If unspecified, the suggestions are set by `initialSuggestions` and
  // are processed by the client.
  //
  // If specified, the app takes the action specified here, such as running
  // a custom function.
  //
  // Supported by Google Workspace Add-ons, but not Chat apps. Support by Chat
  // apps coming soon.
  Action auto_complete_action = 8;
}

// Suggested values that users can enter. These values appear when users click
// inside the text input field. As users type, the suggested values
// dynamically filter to match what the users have typed.
//
// For example, a text input field for programming language might suggest
// Java, JavaScript, Python, and C++. When users start typing "Jav", the list
// of suggestions filters to show just Java and JavaScript.
//
// Suggested values help guide users to enter values that your app can make
// sense of. When referring to JavaScript, some users might enter "javascript"
// and others "java script". Suggesting "JavaScript" can standardize how users
// interact with your app.
//
// When specified, `TextInput.type` is always `SINGLE_LINE`, even if it is set
// to `MULTIPLE_LINE`.
message Suggestions {
  // One suggested value that users can enter in a text input field.
  message SuggestionItem {
    oneof content {
      // The value of a suggested input to a text input field. This is
      // equivalent to what users would enter themselves.
      string text = 1;
    }
  }

  // A list of suggestions used for autocomplete recommendations in text input
  // fields.
  repeated SuggestionItem items = 1;
}

// A list of buttons layed out horizontally.
message ButtonList {
  // An array of buttons.
  repeated Button buttons = 1;
}

// A widget that creates a UI item with options for users to select.
// For example, a dropdown menu or check list.
//
// Chat apps receive and can process the value of entered text during form input
// events. For details about working with form inputs, see [Receive form
// data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
//
// When you need to collect data from users that matches options you set,
// use a selection input. To collect abstract data from users, use the
// text input widget instead.
//
// Only supported in
// [dialogs](https://developers.google.com/chat/how-tos/dialogs). Support for
// [card
// messages](https://developers.google.com/chat/api/guides/message-formats/cards)
// coming soon.
message SelectionInput {
  // The way that an option appears to users. Different options support
  // different types of interactions. For example, users can enable multiple
  // check boxes, but can only select one value from a dropdown menu.
  //
  // Each selection input supports one type of selection. Mixing check boxes
  // and switches, for example, is not supported.
  //
  // Currently supported in
  // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
  // Support for
  // [card
  // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
  // is coming soon.
  enum SelectionType {
    // A set of checkboxes. Users can select multiple check boxes per selection
    // input.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    CHECK_BOX = 0;

    // A set of radio buttons. Users can select one radio button per selection
    // input.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    RADIO_BUTTON = 1;

    // A set of switches. Users can turn on multiple switches at once per
    // selection input.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    SWITCH = 2;

    // A dropdown menu. Users can select one dropdown menu item per selection
    // input.
    //
    // Currently supported in
    // [dialogs](https://developers.google.com/chat/how-tos/dialogs).
    // Support for
    // [card
    // messages](https://developers.google.com/chat/api/guides/message-formats/cards)
    // is coming soon.
    DROPDOWN = 3;
  }

  // A selectable item in a selection input, such as a check box or a switch.
  message SelectionItem {
    // The text displayed to users.
    string text = 1;

    // The value associated with this item. The client should use this as a form
    // input value.
    //
    // For details about working with form inputs, see [Receive form
    // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
    string value = 2;

    // When `true`, more than one item is selected.
    // If more than one item is selected for radio buttons and dropdown menus,
    // the first selected item is received and the ones after are
    // ignored.
    bool selected = 3;
  }

  // The name by which the selection input is identified in a form input event.
  //
  // For details about working with form inputs, see [Receive form
  // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
  string name = 1;

  // The text that appears above the selection input field in the user
  // interface.
  //
  // Specify text that helps the user enter the information your app needs.
  // For example, if users are selecting the urgency of a work ticket from a
  // drop-down menu, the label might be "Urgency" or "Select urgency".
  string label = 2;

  // The way that an option appears to users. Different options support
  // different types of interactions. For example, users can enable multiple
  // check boxes, but can only select one value from a dropdown menu.
  //
  // Each selection input supports one type of selection. Mixing check boxes
  // and switches, for example, is not supported.
  SelectionType type = 3;

  // An array of the selected items. For example, all the selected check boxes.
  repeated SelectionItem items = 4;

  // If specified, the form is submitted when the selection changes. If not
  // specified, you must specify a separate button that submits the form.
  //
  // For details about working with form inputs, see [Receive form
  // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
  Action on_change_action = 5;
}

// Lets users specify a date, a time, or both a date and a time.
//
// Accepts text input from users, but features an interactive date and time
// selector that helps users enter correctly-formatted dates and times. If users
// enter a date or time incorrectly, the widget shows an error that prompts
// users to enter the correct format.
//
// Not supported by Chat apps. Support by Chat apps coming soon.
message DateTimePicker {
  // What kind of date and time input the datetime picker supports.
  enum DateTimePickerType {
    // The user can select a date and time.
    DATE_AND_TIME = 0;

    // The user can only select a date.
    DATE_ONLY = 1;

    // The user can only select a time.
    TIME_ONLY = 2;
  }

  // The name by which the datetime picker is identified in a form input event.
  //
  // For details about working with form inputs, see [Receive form
  // data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs).
  string name = 1;

  // The text that prompts users to enter a date, time, or datetime.
  //
  // Specify text that helps the user enter the information your app needs.
  // For example, if users are setting an appointment, then a label like
  // "Appointment date" or "Appointment date and time" might work well.
  string label = 2;

  // What kind of date and time input the datetime picker supports.
  DateTimePickerType type = 3;

  // The value displayed as the default value before user input
  // or previous user input, represented in milliseconds
  // ([Epoch time](https://en.wikipedia.org/wiki/Unix_time)).
  //
  // For `DATE_AND_TIME` type, the full epoch value is used.
  //
  // For `DATE_ONLY` type, only date of the epoch time is used.
  //
  // For `TIME_ONLY` type, only time of the epoch time is used. For example,
  // to represent 3:00 AM, set epoch time to `3 * 60 * 60 * 1000`.
  int64 value_ms_epoch = 4;

  // The number representing the time zone offset from UTC, in minutes.
  // If set, the `value_ms_epoch` is displayed in the specified time zone.
  // If not set, it uses the user's time zone setting on the client side.
  int32 timezone_offset_date = 5;

  // Triggered when the user clicks **Save** or **Clear** from the datetime
  // picker interface.
  Action on_change_action = 6;
}

// A text, icon, or text + icon button that users can click.
//
// To make an image a clickable button, specify an
// [Image][google.apps.card.v1.Image] (not an
// [ImageComponent][google.apps.card.v1.ImageComponent]) and set an
// `onClick` action.
//
// Currently supported in Chat apps (including [dialogs]
// (https://developers.google.com/chat/how-tos/dialogs) and [card messages]
// (https://developers.google.com/chat/api/guides/message-formats/cards)) and
// Google Workspace Add-ons.
message Button {
  // The text displayed inside the button.
  string text = 1;

  // The icon image. If both `icon` and `text` are set, then the icon appears
  // before the text.
  Icon icon = 2;

  // If set, the button is filled with a solid background color and the font
  // color changes to maintain contrast with the background color. For example,
  // setting a blue background will likely result in white text.
  //
  // If unset, the image background is white and the font color is blue.
  //
  // For red, green and blue, the value of each field is a `float` number that
  // can be expressed in either of two ways: as a number between 0 and 255
  // divided by 255 (153/255) or as a value between 0 and 1 (0.6). 0 represents
  // the absence of a color and 1 or 255/255 represent the full presence of that
  // color on the RGB scale.
  //
  // Optionally set alpha, which sets a level of transparency using this
  // equation:
  //
  // ```
  // pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
  // ```
  //
  // For alpha, a value of 1 corresponds with a solid color, and a value of 0
  // corresponds with a completely transparent color.
  //
  // For example, the following color represents a half transparent red:
  //
  // ```
  // "color": {
  //    "red": 1,
  //    "green": 0,
  //    "blue": 0,
  //    "alpha": 0.5
  // }
  // ```
  google.type.Color color = 3;

  // Required. The action to perform when the button is clicked, such as
  // opening a hyperlink or running a custom function.
  OnClick on_click = 4;

  // If `true`, the button is displayed in an inactive state and doesn't respond
  // to user actions.
  bool disabled = 5;

  // The alternative text used for accessibility.
  //
  // Set descriptive text that lets users know what the button does. For
  // example, if a button opens a hyperlink, you might write: "Opens a new
  // browser tab and navigates to the Google Chat developer documentation at
  // https://developers.google.com/chat".
  string alt_text = 6;
}

// An icon displayed in a widget on a card.
//
// Supports
// [standard](https://developers.google.com/chat/api/guides/message-formats/cards)
// and
// [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons)
// icons.
message Icon {
  // The icon displayed in the widget on the card.
  oneof icons {
    // Display one of the standard icons provided by Google Workspace.
    //
    // For example, to display an airplane icon, specify `AIRPLANE`.
    // For a bus, specify `BUS`.
    //
    // For a full list of supported icons, see [standard
    // icons](https://developers.google.com/chat/api/guides/message-formats/cards).
    string known_icon = 1;

    // Display a custom icon hosted at an HTTPS URL.
    //
    // For example:
    //
    // ```
    // "iconUrl":
    // "https://developers.google.com/chat/images/quickstart-app-avatar.png"
    // ```
    //
    // Supported file types include `.png` and `.jpg`.
    string icon_url = 2;
  }

  // Optional. A description of the icon used for accessibility.
  // If unspecified, the default value "Button" is provided. As a best practice,
  // you should set a helpful description for what the icon displays, and if
  // applicable, what it does. For example, `A user's account portrait`, or
  // `Opens a new browser tab and navigates to the Google Chat developer
  // documentation at https://developers.google.com/chat`.
  //
  // If the icon is set in a [Button][google.apps.card.v1.Button], the `altText`
  // appears as helper text when the user hovers over the button. However, if
  // the button also sets `text`, the icon's `altText` is ignored.
  string alt_text = 3;

  // The crop style applied to the image. In some cases, applying a
  // `CIRCLE` crop causes the image to be drawn larger than a standard
  // icon.
  Widget.ImageType image_type = 4;
}

// Represents the crop style applied to an image.
//
// For example, here's how to apply a 16 by 9 aspect ratio:
//
// ```
// cropStyle {
//  "type": "RECTANGLE_CUSTOM",
//  "aspectRatio": 16/9
// }
// ```
message ImageCropStyle {
  // Represents the crop style applied to an image.
  enum ImageCropType {
    // No value specified. Do not use.
    IMAGE_CROP_TYPE_UNSPECIFIED = 0;

    // Default value. Applies a square crop.
    SQUARE = 1;

    // Applies a circular crop.
    CIRCLE = 2;

    // Applies a rectangular crop with a custom aspect ratio. Set the custom
    // aspect ratio with `aspectRatio`.
    RECTANGLE_CUSTOM = 3;

    // Applies a rectangular crop with a 4:3 aspect ratio.
    RECTANGLE_4_3 = 4;
  }

  // The crop type.
  ImageCropType type = 1;

  // The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.
  //
  // For example, here's how to apply a 16 by 9 aspect ratio:
  //
  // ```
  // cropStyle {
  //  "type": "RECTANGLE_CUSTOM",
  //  "aspectRatio": 16/9
  // }
  // ```
  double aspect_ratio = 2;
}

// Represents the complete border style applied to items in a widget.
message BorderStyle {
  // Represents the border types applied to widgets.
  enum BorderType {
    // No value specified.
    BORDER_TYPE_UNSPECIFIED = 0;

    // Default value. No border.
    NO_BORDER = 1;

    // Outline.
    STROKE = 2;
  }

  // The border type.
  BorderType type = 1;

  // The colors to use when the type is `BORDER_TYPE_STROKE`.
  google.type.Color stroke_color = 2;

  // The corner radius for the border.
  int32 corner_radius = 3;
}

// Represents an image.
message ImageComponent {
  // The image URL.
  string image_uri = 1;

  // The accessibility label for the image.
  string alt_text = 2;

  // The crop style to apply to the image.
  ImageCropStyle crop_style = 3;

  // The border style to apply to the image.
  BorderStyle border_style = 4;
}

// Displays a grid with a collection of items.
//
// A grid supports any number of columns and items. The number of rows is
// determined by items divided by columns. A grid with
// 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns
// has 6 rows.
//
// Currently supported in
// [dialogs](https://developers.google.com/chat/how-tos/dialogs).
// Support for
// [card
// messages](https://developers.google.com/chat/api/guides/message-formats/cards)
// is coming soon.
//
// For example, the following JSON creates a 2 column grid with a single
// item:
//
// ```
// "grid": {
//   "title": "A fine collection of items",
//   "numColumns": 2,
//   "borderStyle": {
//     "type": "STROKE",
//     "cornerRadius": 4.0
//   },
//   "items": [
//     "image": {
//       "imageUri": "https://www.example.com/image.png",
//       "cropStyle": {
//         "type": "SQUARE"
//       },
//       "borderStyle": {
//         "type": "STROKE"
//       }
//     },
//     "title": "An item",
//     "textAlignment": "CENTER"
//   ],
//   "onClick": {
//     "openLink": {
//       "url":"https://www.example.com"
//     }
//   }
// }
// ```
message Grid {
  // Represents a single item in the grid layout.
  message GridItem {
    // Represents the various layout options available for a grid item.
    enum GridItemLayout {
      // No layout specified.
      GRID_ITEM_LAYOUT_UNSPECIFIED = 0;

      // The title and subtitle are shown below the grid item's image.
      TEXT_BELOW = 1;

      // The title and subtitle are shown above the grid item's image.
      TEXT_ABOVE = 2;
    }

    // A user-specified identifier for this grid item. This identifier is
    // returned in the parent Grid's onClick callback parameters.
    string id = 1;

    // The image that displays in the grid item.
    ImageComponent image = 2;

    // The grid item's title.
    string title = 3;

    // The grid item's subtitle.
    string subtitle = 4;

    // The layout to use for the grid item.
    GridItemLayout layout = 9;
  }

  // The text that displays in the grid header.
  string title = 1;

  // The items to display in the grid.
  repeated GridItem items = 2;

  // The border style to apply to each grid item.
  BorderStyle border_style = 3;

  // The number of columns to display in the grid. A default value
  // is used if this field isn't specified, and that default value is
  // different depending on where the grid is shown (dialog versus companion).
  int32 column_count = 4;

  // This callback is reused by each individual grid item, but with the
  // item's identifier and index in the items list added to the callback's
  // parameters.
  OnClick on_click = 5;
}

// Represents how to respond when users click an interactive element on
// a card, such as a button.
message OnClick {
  oneof data {
    // If specified, an action is triggered by this `onClick`.
    Action action = 1;

    // If specified, this `onClick` triggers an open link action.
    OpenLink open_link = 2;

    // An add-on triggers this action when the action needs to open a
    // link. This differs from the `open_link` above in that this needs to talk
    // to server to get the link. Thus some preparation work is required for
    // web client to do before the open link action response comes back.
    Action open_dynamic_link_action = 3;

    // A new card is pushed to the card stack after clicking if specified.
    //
    // Supported by Google Workspace Add-ons, but not Chat apps.
    Card card = 4;
  }
}

// Represents an `onClick` event that opens a hyperlink.
message OpenLink {
  // When an OnClick opens a link, then the client can either open it as a
  // full size window (if that is the frame used by the client), or an
  // overlay (such as a pop-up). The implementation depends on the client
  // platform capabilities, and the value selected might be ignored if the
  // client doesn't support it. `FULL_SIZE` is supported by all clients.
  //
  // Supported by Google Workspace Add-ons, but not Chat apps.
  enum OpenAs {
    // The link opens as a full size window (if that's the frame used by the
    // client.
    FULL_SIZE = 0;

    // The link opens as an overlay, such as a pop-up.
    OVERLAY = 1;
  }

  // What the client does when a link opened by an `OnClick` action gets closed.
  //
  // Implementation depends on client platform capabilities. For example, a web
  // browser might open a link in a pop-up window with an `OnClose` handler.
  //
  // If both `OnOpen` and `OnClose` handlers are set, and the client platform
  // can't support both values, `OnClose` takes precedence.
  //
  // Supported by Google Workspace Add-ons, but not Chat apps.
  enum OnClose {
    // Default value. The card does not reload; nothing happens.
    NOTHING = 0;

    // Reloads the card after the child window closes.
    //
    // If used in conjunction with
    // [OpenAs.OVERLAY](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
    // the child window acts as a modal dialog and the parent card is blocked
    // until the child window closes.
    RELOAD = 1;
  }

  // The URL to open.
  string url = 1;

  // How to open a link. Not supported by Chat apps.
  OpenAs open_as = 2;

  // Whether the client forgets about a link after opening it, or observes it
  // until the window closes. Not supported by Chat apps.
  OnClose on_close = 3;
}

// An action that describes the behavior when the form is submitted.
// For example, an Apps Script can be invoked to handle the form.
message Action {
  // List of string parameters to supply when the action method is invoked.
  // For example, consider three snooze buttons: snooze now, snooze 1 day,
  // snooze next week. You might use action method = snooze(), passing the
  // snooze type and snooze time in the list of string parameters.
  //
  // To learn more, see
  // [CommonEventObject](https://developers.google.com/chat/api/reference/rest/v1/Event#commoneventobject).
  message ActionParameter {
    // The name of the parameter for the action script.
    string key = 1;

    // The value of the parameter.
    string value = 2;
  }

  // Specifies the loading indicator that the action displays while
  // making the call to the action.
  enum LoadIndicator {
    // Displays a spinner to indicate that content is loading.
    SPINNER = 0;

    // Nothing is displayed.
    NONE = 1;
  }

  // Optional. Required when opening a
  // [dialog](https://developers.google.com/chat/how-tos/dialogs).
  //
  // What to do in response to an interaction with a user, such as a user
  // clicking button on a card message.
  //
  // If unspecified, the app responds by executing an `action` - like opening a
  // link or running a function - as normal.
  //
  // By specifying an `interaction`, the app can respond in special interactive
  // ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can
  // open a [dialog](https://developers.google.com/chat/how-tos/dialogs).
  //
  // When specified, a loading indicator is not shown.
  //
  // Supported by Chat apps, but not Google Workspace Add-ons. If specified for
  // an add-on, the entire card is stripped and nothing is shown in the client.
  enum Interaction {
    // Default value. The `action` executes as normal.
    INTERACTION_UNSPECIFIED = 0;

    // Opens a [dialog](https://developers.google.com/chat/how-tos/dialogs), a
    // windowed, card-based interface that Chat apps use to interact with users.
    //
    // Only supported by Chat apps in response to button-clicks on card
    // messages.
    //
    // Not supported by Google Workspace Add-ons. If specified for an add-on,
    // the entire card is stripped and nothing is shown in the client.
    OPEN_DIALOG = 1;
  }

  // A custom function to invoke when the containing element is
  // clicked or othrwise activated.
  //
  // For example usage, see [Create interactive
  // cards](https://developers.google.com/chat/how-tos/cards-onclick).
  string function = 1;

  // List of action parameters.
  repeated ActionParameter parameters = 2;

  // Specifies the loading indicator that the action displays while
  // making the call to the action.
  LoadIndicator load_indicator = 3;

  // Indicates whether form values persist after the action. The default value
  // is `false`.
  //
  // If `true`, form values remain after the action is triggered. When using
  // [LoadIndicator.NONE](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
  // for actions, `persist_values` = `true`is recommended, as it ensures that
  // any changes made by the user after form or on change actions are sent to
  // the server are not overwritten by the response.
  //
  // If `false`, the form values are cleared when the action is triggered. When
  // `persist_values` is set to `false`, it is strongly recommended that the
  // card use
  // [LoadIndicator.SPINNER](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
  // for all actions, as this locks the UI to ensure no changes are made by the
  // user while the action is being processed.
  //
  // Not supported by Chat apps.
  bool persist_values = 4;

  // Optional. Required when opening a
  // [dialog](https://developers.google.com/chat/how-tos/dialogs).
  //
  // What to do in response to an interaction with a user, such as a user
  // clicking button on a card message.
  //
  // If unspecified, the app responds by executing an `action` - like opening a
  // link or running a function - as normal.
  //
  // By specifying an `interaction`, the app can respond in special interactive
  // ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can
  // open a [dialog](https://developers.google.com/chat/how-tos/dialogs).
  //
  // When specified, a loading indicator is not shown.
  //
  // Supported by Chat apps, but not Google Workspace Add-ons. If specified for
  // an add-on, the entire card is stripped and nothing is shown in the client.
  Interaction interaction = 5;
}
